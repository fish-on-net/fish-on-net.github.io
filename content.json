{"meta":{"title":"六月闲居","subtitle":"JUNE","description":"June is here.","author":"六月","url":"https://june-storm.github.io","root":"/"},"pages":[{"title":"About","date":"2021-06-23T11:52:00.811Z","updated":"2021-06-23T11:52:00.811Z","comments":true,"path":"about/index.html","permalink":"https://june-storm.github.io/about/index.html","excerpt":"","text":""},{"title":"资源","date":"2021-03-22T05:54:06.000Z","updated":"2021-03-22T05:56:30.631Z","comments":false,"path":"resources/index.html","permalink":"https://june-storm.github.io/resources/index.html","excerpt":"","text":""},{"title":"Categories","date":"2021-08-24T16:00:00.000Z","updated":"2021-08-25T05:27:44.209Z","comments":true,"path":"categories/index.html","permalink":"https://june-storm.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2022-03-31T16:00:00.000Z","updated":"2022-04-01T03:45:28.242Z","comments":true,"path":"tags/index.html","permalink":"https://june-storm.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"长难句翻译","slug":"2022-5-6-长难句翻译","date":"2022-05-05T16:00:00.000Z","updated":"2022-05-06T14:25:19.536Z","comments":true,"path":"june/2022-5-6-长难句翻译/","link":"","permalink":"https://june-storm.github.io/june/2022-5-6-%E9%95%BF%E9%9A%BE%E5%8F%A5%E7%BF%BB%E8%AF%91/","excerpt":"","text":"DAY 02The military is spending more money than ever to address mental health issues within the ranks, and their latest attempt is a smart phone application called the T2 MoodTracker application, which helps service members keep track of their mental health after deployments. 军队正在花费比以往更多的钱来解决队伍中的心理健康问题，他们的最新尝试是一个名为T2 MoodTracker的智能手机应用程序，它帮助服役人员在部署后跟踪他们的心理健康。 DAY 07A study by academics from the University of California and North-western University claimed that “the casual link between the consumption of restaurant foods and obesity is minimal at best.” 加利福尼亚大学和西北大学的学者们的一项研究声称，”食用餐馆食品和肥胖之间的偶然联系充其量是微不足道的”。 DAY 11Lisa Whittaker, a postgraduate student at the University of Stirling, who studied teens aged 16-18 in Scotland, said the slang had been created to keep their activities private,and cited the example of one young girl who was sacked after bosses found pictures of her drinking on the website. 研究苏格兰16-18岁青少年的斯特林大学研究生Lisa Whittaker说，创造这种俚语是为了保持他们活动的私密性，并列举了一个年轻女孩的例子，她在老板发现她网上喝酒的照片后被解雇了。 DAY 20Even adults can benefit from the practice when studying new graphically different languages– such as Chinese– or symbols in sciences such as chemistry. 即使是成年人，在学习新的截然不同的图形化语言（如汉语）或科学符号（如化学符号）时，也能从中受益。 DAY 21For anyone whose kids balk at or have trouble with traditional handwriting instruction, the arrival of new educational games for the iPhone, iPad and other touch screen devices may come as a welcome teaching aid. 对于那些不愿接受传统手写教学或有困难的孩子来说，适用于 iPhone、iPad 和其他触摸屏设备的新教育游戏的到来可能会成为一种受欢迎的教学辅助工具。 外刊阅读DAY 23You might think fear and envy about housing is part of the human condition. In fact, the property pathology has its roots in a shift in public policy in the 1950s toward promoting home ownership. Since then governments have used subsidies, tax breaks and sales of public housing to encourage owner-occupation over renting. 你可能认为对住房的恐惧和羡慕是人类状况的一部分。事实上，房产病症的根源在于20世纪50年代公共政策向促进住房所有权的转变。从那时起，政府利用补贴、减税和出售公共住房来鼓励自住而不是租房。","categories":[{"name":"笔记","slug":"笔记","permalink":"https://june-storm.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"英语","slug":"英语","permalink":"https://june-storm.github.io/tags/%E8%8B%B1%E8%AF%AD/"},{"name":"考研","slug":"考研","permalink":"https://june-storm.github.io/tags/%E8%80%83%E7%A0%94/"}]},{"title":"OS课堂笔记","slug":"2022-5-4-OS课堂笔记","date":"2022-05-03T16:00:00.000Z","updated":"2022-05-06T14:47:32.085Z","comments":true,"path":"june/2022-5-4-OS课堂笔记/","link":"","permalink":"https://june-storm.github.io/june/2022-5-4-OS%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/","excerpt":"","text":"3/2rm fs.img：删除fs.img文件 $ make fs.img 若是最新，则回报：make: “fs.img”已是最新。 非最新，则回报： 1234./mkfs fs.img README _cat _echo _forktest _grep _init _kill _ln _ls _mkdir _rm _sh _stressfs _usertests _wc _zombie //./mkfs：执行mkfs文件；fs.img：输出的文件名；fs.img后面是所有要打包的文件的文件名，注意有些文件名前有下划线，有些没有（如README）。nmeta 59 (boot, super, log blocks 30 inode blocks 26, bitmap blocks 1) blocks 941 total 1000 //boot block占1，super block占1，log（日志块）占30，inode blocks（i结点块）占26，bitmap block占1，1+1+30+26+1=59，59+941=1000 balloc: first 666 blocks have been allocated //前666个blocks（块）还没有分配。balloc: write bitmap block at sector 58 //bitmap block(位映射块)放在扇区58（从0开始，0:boot block，1:super block，2~31:log，32~57:inode block，58:bitmap block） 在fs.img中打包一个新文件进去：修改Makefile第185-186行，将新文件名添加在末尾（或$(UPROGS)前面） 12185 fs.img: mkfs README $(UPROGS) new_file.txt186 ./mkfs fs.img README new_file.txt $(UPROGS) 然后执行make cleanmake qemu-nox：生成可执行的系统（只make的话是生成xv6）可以看见./mkfs fs.img README _cat _echo _forktest _grep _init _kill _ln _ls _mkdir _rm _sh _stressfs _usertests _wc _zombie new_file.txt ，其末尾增加了new_file.txt 在虚拟机中ls，也可以看见新增了new_file.txt，输入cat new_file.txt可以查看其中内容。 文件系统一个文件最大有140块（12个直接块，128个间接块），最大为71680字节。 fs.h： 1234#define NDIRECT 12 //一个文件有12个直接块#define NINDIRECT (BSIZE / sizeof(uint)) //间接块数量=512/4(每个条目占4字节)=128块#define MAXFILE (NDIRECT + NINDIRECT) //一个文件最多有多少块// 一个文件最大大小=最多块数*块的大小=(12+128)*512=71680字节(Byte) 1Byte = 8bit 一个文件系统必有i结点，存储索引信息等。 术语： data block 数据块用来放置文件内容。 super block 超级块主要记录文件系统的整体信息。 inode 索引节点（i节点）主要记录文件的属性、权限以及该文件实际数据的位置（所在block号）。 inode的大小固定，一个文件占用一个inode。 文件系统能创建的文件数量与inode的数量相关。 bitmap 映射表/对照表 block bitmap：区块对照表记录使用与未使用的block号，并在文件添加修改时对应地修改block的使用状况。 inode bitmap：inode对照表记录使用与未使用的inode号，并在文件添加修改时对应地修改inode的使用状况 磁盘组成：12Disk layout:[ boot block | sb block | log | inode blocks | free bit map | data blocks ] 查看fs.img执行vim fs.img 打开fs.img:%!xxd 用二进制查看 boot块：第1~32行，即00000000~000001f0 super块：第32-行，即00000200~000002f0 133 00000200: e803 0000 ad03 0000 c800 0000 1e00 0000 ................ e802 0000：(3E8)16 = (1000)10 ，表示文件系统的大小（总块数）；ad03 0000：(3AD)16 = (941)10 ，表示data block的数量；c800 0000：(C8)16 = (200)10 ，表示inode的数量；1e00 0000：(1E)16 = (30)10 ，表示log block的数量。 mkfs.c的tagbar变量variables12345678910nbitmapninodeblocksnlognmeta //元块，boot block，sb block，log，inode blocks和free bitmap的总块数nblocks //data blocks的块数 nmeta+nblocks=整个盘片所有的块数fsfdsb //超级块zeroesfreeinode freeblock 函数functions12345678910xshort(ushort x)xint(uint x)main(int argc, char *argv[])balloc(int used) //分配一个块wsect(uint sec, void *buf) //写一个块rsect(uint sec, void *buf) //读一个块winode(uint inum, struct dinode *ip) //写一个inoderinode(uint inum, struct dinode *ip) //读一个inodeialloc(ushort type) //分配i节点iappend(uint inum, void *xp, int n) //追加i节点 mkfs.c &gt; main()中： 123456789bzero(&amp;de, sizeof(de)); de.inum = xshort(rootino); strcpy(de.name, &quot;.&quot;); iappend(rootino, &amp;de, sizeof(de)); bzero(&amp;de, sizeof(de));de.inum = xshort(rootino);strcpy(de.name, &quot;..&quot;); iappend(rootino, &amp;de, sizeof(de)); 往根目录下追加了两个目录项“.”和“..”，他们都指向根目录。cd .和cd ..都只会跳到根目录。即ls命令后出现的前两行，大小都是512（占一个块）。 1234567891011121314151617181920. 1 1 512.. 1 1 512README 2 2 2286cat 2 3 16256echo 2 4 15112forktest 2 5 9420grep 2 6 18476init 2 7 15696kill 2 8 15144ln 2 9 14996ls 2 10 17624mkdir 2 11 15240rm 2 12 15216sh 2 13 27860stressfs 2 14 16132usertests 2 15 67236wc 2 16 16996zombie 2 17 14808new_file.txt 2 18 23console 3 19 0 Makefile &gt; xv6.pdf12345xv6.pdf: $(PRINT) ./runoff ls -l xv6.pdfprint: xv6.pdf 执行make xv6.pdf，如果没错会生成一个xv6.pdf 4/9可执行文件ls _*可以看到所有首位是下划线的文件，这些文件是可执行文件。在系统中不显示下划线。 file查看它们的属性可知是32位的程序，Intel 80386，静态链接的（statically linked）。 12$ file _cat_cat: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, with debug_info, not stripped _xxx通常编译自xxx.c。 cat.c的头文件有： types.h：给类型取别名。 stat.h：用编号定义目录、文件、设备和一个状态结构体stat。 user.h：系统调用和类似c语言标准库中的函数ulib.c 启动一个进程时会隐形地打开3个文件： 0号：标准输入文件 1号：标准输出文件， 2号：标准错误输出文件 执行cat时若不带参数则以键盘的输入为参数，输出输入的内容（按CTRL+D退出）；带参数则输入参数中的内容。 下划线的规定Makefile： 12345# 所有带下划线的可执行文件依赖于不带下划线的.o文件与用户库文件_%: %.o $(ULIB) $(LD) $(LDFLAGS) -N -e main -Ttext 0 -o $@ $^ $(OBJDUMP) -S $@ &gt; $*.asm $(OBJDUMP) -t $@ | sed &#x27;1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d&#x27; &gt; $*.sym 系统自带的可执行文件 cat echo：将参数标准输出（STDOUT），即在显示器上输出。 1234$ echo hellohello$ echo 重复这句话重复这句话 ln ls mkdir：创建目录 rm：删除文件 forktest：创建子进程 123$ forktestfork testfork test OK 打包程序至系统 写一个可执行的.c文件（以hello.c为例），注意头文件和系统自带函数。 在Makefile的UPROGS中添加文件名，fs.img打包时就会打包进去。 1234UPROGS&#x3D;\\ _cat\\ _echo\\ _hello\\ ←添加的文件 make clean，make make qemu-nox可以看到可执行文件hello出现在了根目录下。 执行hello可以正常运行。 写一个copy调试1.创建GDB文件 make gdbinit生成一个.gdbinit脚本文件，它配置了启动gdb时的端口信息。 2.在无图形化界面下启动gdb make gdb-nox-gdb","categories":[{"name":"笔记","slug":"笔记","permalink":"https://june-storm.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"操作系统实验","slug":"操作系统实验","permalink":"https://june-storm.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/"}]},{"title":"嵌入式应用笔记","slug":"2022-4-1-嵌入式笔记","date":"2022-03-31T16:00:00.000Z","updated":"2022-05-06T14:51:26.202Z","comments":true,"path":"june/2022-4-1-嵌入式笔记/","link":"","permalink":"https://june-storm.github.io/june/2022-4-1-%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%94%E8%AE%B0/","excerpt":"","text":"3/41.用直白的话,概述下列的函数的实现过程,并重点解释temp = (c&gt;&gt;j) &amp; 0x01;gpio_set (led_d[j], temp);的作用. 12345678910111213141516void LEDshow1(uint_8 i, uint_8 c)&#123; uint_8 temp; uint_8 j; //位选全部置0=不选中 for (j=0;j&lt;=3;j++) gpio_set (led_cs[j], 0); //数据上线 for (j=0;j&lt;=7;j++) &#123; temp = (c&gt;&gt;j) &amp; 0x01; // gpio_set (led_d[j], temp); &#125; //选择的位选置1 gpio_set (led_cs[i], 1);&#125; 答：为了方便叙说，位号指4位LED的某位，引脚号指数据线的8位的某个引脚。直白叙述：（1）先通过第一个循环，将每个位置为0，即LED的每一位都不选中，（2）接着通过第二个循环，是将数据线的每个引脚设置相应的数据，具体是通过temp = (c&gt;&gt;j) &amp; 0x01的c&gt;&gt;j先将j位的移至最后位，再与0x01相与，j位的值给temp(准确地是temp的最后一位，其他位无意义)，接着通过gpio_set (led_d[j], temp)，由temp给led_d[j]，即实现将c的j位值给了led_d[j]对应的引脚，如此循环8次，数据线8位得到相应数值。（3）最后通过gpio_set (led_cs[i], 1)将LED位号i的相应数字显示。 2.问一次调用LEDshow(uint_8 data[4]),显示LED的4位的几位？ 答：一次调用LEDshow，显示LED的某1位。 3/111、Flash的写、擦除的操作是怎样？答：1.（1）擦除的操作：将存储单元的二进制内容由0变1；（2）写的操作：将存储单元的二进制内容由1变0 2、写出下列所指地址，并说出此地址是什么地方，作用是干什么的？ 1234// 设置目标地址FTFA_FCCOB1 = 0x00;FTFA_FCCOB2 = 0x04;FTFA_FCCOB3 = 0x0C; 答：地址：0x00040c，该地址为Flash加密寄存器，作用是将加密数据或不加密数据写入该地址，完成加密或不加密操作。 3、Flash读的流程图答：逻辑地址读和物理地址读的两个流程图 4.Flash写的流程图 5.擦除的流程图 6.区域保护的流程图 3/181、什么是ADC模块，其作用又是什么？ ADC模块：模/数转换模块，又可以称作AD转换模块；功能是将电压信号转换为相应的数字信号。 2、与AD转换编程直接相关的基本问题有哪些？ 转换精度、转换速度、单端输入与差分输入、AD参考电压、滤波问题、物理量回归。 3、理论上，KL25中有多少个模拟输入通道？芯片内部包含一个温度传感器，其通道号是多少? 26个。 温度传感器通道号：26。 4、数据结果寄存器在不同的模式下数据表达情况，其中有多位符号位，如何理解？举例说明。 数据有效位只有4位，前面可以视作只有1位符号，也可视作有多位符号。 5、DA转换器一般由哪些部分组成的？ DA转换器一般由数码缓冲寄存器、模拟电子开关、参考电压、解码网络和求和电路等组成。 6、在本书选用的KL25封装中，DA模块多少个对外引脚？ 1个对外引脚，PTE30。 7、画出adc_read的编程流程图。 8、计算 (1) B=0xFC;A=0b00000100 | B;那么 A=? (2) B=0xAD;A=0b00000100 &amp; B;那么 A=? (3) A=0x33;A |= 0x01;A=? (4) A=0xAD;A &amp;= ~0x01;A=? （1）A=0xFC （2）A=0x04 （3）A=0x33 （4）A=0xAC 3/251、SPI是异步还是同步的串行通信方式? SPI同步串行通讯。 2、SPI可以作半双工还是全双工通信？ 全双工。 3、MISO和MOSI分别是什么意思？ MISO：主机输入/从机输出数据线。 MOSI：主机输出/从机输入数据线。 4、SPI的SCK是谁提供的？并控制着谁的通信？ SCK：串行时钟线。 串行时钟信号由主机的内部总线时钟分频获得，主机的SCK引脚输出给从机的SCK引脚，控制整个数据的传输速度。 5、SPI有哪些常用波特率的值？ 可取12000、6000、4000、3000、1500、1000bps。 6、SPI通信时有两个重要的参数CPOL和CPHA，由此获得几种通信时序？ 时钟极性由CPOL控制，时钟相位由CPHA来控制，二者组合起来共有四种可能的取值情况，具体如下： （1）空闲电平低电平，上升沿取数（CPOL=0，CPHA=0） （2）空闲电平低电平，下降沿取数（CPOL=0，CPHA=1） （3）空闲电平高电平，下降沿取数（CPOL=1，CPHA=0） （4）空闲电平高电平，上升沿取数（CPOL=1，CPHA=1） 7、画一个CPOL=1和CPHA=0时的数据/时钟时序图。 8、画SPI_send1的流程图。 9、IIC是什么通信方式？ IIC：集成电路互联总线，采用双向2线制串行数据传输方式。 10、IIC主要用于哪里通信？ 主要用于同一电路板内各集成电路模块之间的连接 11、IIC通信需要有几根线，是哪几种线？ 两根线：数据线、时钟线。 12、IIC的寻址过程是怎么操作的？ I2C总线采用了独特的寻址约定，规定了起始信号后的第一个字节为寻址字节，用来寻址被控器件，并规定数据传送方向。具体的寻址过程为：主控器发送起始信号后，立即发送寻址字节，这时总线上的所有器件都将寻址字节中的7位地址与自己器件地址比较。如果两者相同，则该器件认为被主控器寻址，并发送应答信号，被控器根据数据方向位确定自身是作为发送器还是接收器。 4/11、TSI模块是干什么用的？ 触摸感应输入模块TSI，可用于基于接近感应的人机交互设备的设计，实现操作人员与电气设备的隔离，避免了对设备的直接操作，也使得设备损坏的概率降低，从而减少了维护成本。 2、TSI是通过什么方式识别触摸的？ 根据电子学的知识可知，未接地的电极与地之间存在电容。人体可以当作是一个接地面，当有人体接近电极板时，等效地增大了电极与地之间的有效面积，使电极板电容值增大。 TSI模块的内部机制可以实现对电极电容值的检测，并且可以设定触发检测事件的阈值。当检测到电容值大于设定阈值时，TSI的触发标志位将置位，并可激活发出中断请求，从而实现了触摸感应事件的响应。 3、TSI是通过什么方式测量电容大小的？ TSI模块内部具有两个电流源对外接电极进行充放电，在电极板上产生三角波信号，其频率随电极电容变化而变化，当电极电容增大时，三角波信号的频率减小，周期变大。TSI模块以一个内部振荡器产生的时钟信号为参考节拍，对电极上的三角波电压信号的周期进行测量计数，当三角波电压信号周期增大时，对应计数值亦会增大。 4、嵌入式实时操作系统是什么？ 嵌入式操作系统（Embedded Operation System，EOS）是一种工作在嵌入式计算机上的系统软件。一般情况下，它嵌入到微控制器（Microcontroller，MCU）、应用处理器（Application Processor）或其他存储载体中。它有一般操作系统最基本的功能，负责嵌入式系统的软/硬件资源的分配、任务调度、同步机制、中断处理等功能。 5、RTOS的基本结构包括哪些？ 从结构来看，一般情况下，RTOS内核表现为微内核（Micro Kernel）结构，将核心功能（如任务管理、任务调度、任务通信、中断处理）放在内核中，而将那些不是必需的功能和服务（如存储管理、设备管理、网络通信、文件系统等）作为内核之上可配置的部分。 6、RTOS的基本功能有哪些？ 任务管理与调度、任务间的通信与同步、存储管理、时间管理、中断处理等。 7、RTOS调度的基本单位是什么？它有那几种状态？ RTOS调度的基本单位就是任务。 8、MQX的任务间通信和同步主要机制包括哪些？ MQX的任务间通信和同步主要机制有消息、事件、信号量等。 9、整个系统的时间基准是什么？ RTOS需要一个硬件定时器来产生需要的“滴答”中断，作为整个系统的时间基准，这个时间基准是系统调度的基础。滴答中断也是系统定时服务的基础，生成系统各种格式的时间。 10、任务是什么？ 在RTOS下，系统把一个复杂的嵌入式应用工程按一定规则分解成一个个功能清晰的小工程，然后设定各个小工程的运行规则，交给RTOS管理，这就是基于RTOS编程的基本思想。这一个个的小工程被称之为任务（Task）。 11、死锁产生的必要条件是哪些？ 死锁产生的必要条件有四个，即:资源的互斥访问资源的不可抢占资源的请求保持任务的循环等待 12、任务间通信的方式主要有哪些？ 任务间通信的方式主要有事件、信号量、消息等。 Arduino用LED加7数码管译码器的程序。大家先理解理解，以后作为作业让大家回答。 12345678910111213141516//数据编码c和位编码j的确定下,一位的显示void LEDShow1(unsigned char c,int j)&#123; int i; if(j&gt;3) j=0;//位线是否越界 //数据上线 for(i=0;i&lt;5;i++) &#123; digitalWrite(LEDData[i],(c&gt;&gt;i)&amp;0x01);//c为所显示值;低4位为数据，高1位为小数点 &#125; //位选线 for (i=0;i&lt;2;i++) &#123; digitalWrite(LEDCS[i], (j&gt;&gt;i)&amp;0x01);//2位;j为所选位 &#125;&#125;","categories":[{"name":"笔记","slug":"笔记","permalink":"https://june-storm.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"嵌入式应用","slug":"嵌入式应用","permalink":"https://june-storm.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BA%94%E7%94%A8/"}]}],"categories":[{"name":"笔记","slug":"笔记","permalink":"https://june-storm.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"英语","slug":"英语","permalink":"https://june-storm.github.io/tags/%E8%8B%B1%E8%AF%AD/"},{"name":"考研","slug":"考研","permalink":"https://june-storm.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"操作系统实验","slug":"操作系统实验","permalink":"https://june-storm.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/"},{"name":"嵌入式应用","slug":"嵌入式应用","permalink":"https://june-storm.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BA%94%E7%94%A8/"}]}